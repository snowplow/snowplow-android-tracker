package com.snowplowanalytics.snowplow.configuration

import com.snowplowanalytics.core.tracker.SubjectConfigurationInterface
import com.snowplowanalytics.snowplow.util.Size
import org.json.JSONObject

/**
 * This class represents the configuration of the subject.
 * The SubjectConfiguration can be used to setup the tracker with the basic information about the
 * user and the app which will be attached on all the events as contexts.
 * The contexts to track can be enabled in the [TrackerConfiguration] class.
 */
open class SubjectConfiguration() : Configuration, SubjectConfigurationInterface {
    /**
     * @see .userId
     */
    override var userId: String? = null

    /**
     * @see .networkUserId
     */
    override var networkUserId: String? = null

    /**
     * @see .domainUserId
     */
    override var domainUserId: String? = null

    /**
     * @see .useragent
     */
    override var useragent: String? = null

    /**
     * @see .ipAddress
     */
    override var ipAddress: String? = null

    /**
     * @see .timezone
     */
    override var timezone: String? = null

    /**
     * @see .language
     */
    override var language: String? = null

    /**
     * @see .screenResolution
     */
    override var screenResolution: Size? = null

    /**
     * @see .screenViewPort
     */
    override var screenViewPort: Size? = null

    /**
     * @see .colorDepth
     */
    override var colorDepth: Int? = null
    
    // Builder methods
    
    /**
     * The custom UserID.
     */
    fun userId(userId: String?): SubjectConfiguration {
        this.userId = userId
        return this
    }

    /**
     * The network UserID.
     * @apiNote It's not generated by the tracker, it needs to be filled by the developer when instrumenting the tracker.
     */
    fun networkUserId(networkUserId: String?): SubjectConfiguration {
        this.networkUserId = networkUserId
        return this
    }

    /**
     * The domain UserID.
     * @apiNote It's not generated by the tracker, it needs to be filled by the developer when instrumenting the tracker.
     */
    fun domainUserId(domainUserId: String?): SubjectConfiguration {
        this.domainUserId = domainUserId
        return this
    }

    /**
     * The user-agent.
     * @apiNote It's not generated by the tracker, it needs to be filled by the developer when instrumenting the tracker.
     */
    fun useragent(useragent: String?): SubjectConfiguration {
        this.useragent = useragent
        return this
    }

    /**
     * The IP address.
     * @apiNote It's not generated by the tracker, it needs to be filled by the developer when instrumenting the tracker.
     */
    fun ipAddress(ipAddress: String?): SubjectConfiguration {
        this.ipAddress = ipAddress
        return this
    }

    /**
     * The current timezone.
     */
    fun timezone(timezone: String?): SubjectConfiguration {
        this.timezone = timezone
        return this
    }

    /**
     * The language set in the device.
     */
    fun language(language: String?): SubjectConfiguration {
        this.language = language
        return this
    }

    /**
     * The screen resolution.
     */
    fun screenResolution(screenResolution: Size?): SubjectConfiguration {
        this.screenResolution = screenResolution
        return this
    }

    /**
     * The screen viewport.
     * @apiNote It's not generated by the tracker, it needs to be filled by the developer when instrumenting the tracker.
     */
    fun screenViewPort(screenViewPort: Size?): SubjectConfiguration {
        this.screenViewPort = screenViewPort
        return this
    }

    /**
     * The color depth.
     * @apiNote It's not generated by the tracker, it needs to be filled by the developer when instrumenting the tracker.
     */
    fun colorDepth(colorDepth: Int?): SubjectConfiguration {
        this.colorDepth = colorDepth
        return this
    }

    // Copyable
    override fun copy(): SubjectConfiguration {
        return SubjectConfiguration()
            .userId(userId)
            .networkUserId(networkUserId)
            .domainUserId(domainUserId)
            .useragent(useragent)
            .ipAddress(ipAddress)
            .timezone(timezone)
            .language(language)
            .screenResolution(screenResolution)
            .screenViewPort(screenViewPort)
            .colorDepth(colorDepth)
    }

    // JSON Formatter
    constructor(jsonObject: JSONObject) : this() {
        userId = if (jsonObject.has("userId")) jsonObject.optString("userId") else null
        networkUserId =
            if (jsonObject.has("networkUserId")) jsonObject.optString("networkUserId") else null
        domainUserId =
            if (jsonObject.has("domainUserId")) jsonObject.optString("domainUserId") else null
        useragent = if (jsonObject.has("useragent")) jsonObject.optString("useragent") else null
        ipAddress = if (jsonObject.has("ipAddress")) jsonObject.optString("ipAddress") else null
        timezone = if (jsonObject.has("timezone")) jsonObject.optString("timezone") else null
        language = if (jsonObject.has("language")) jsonObject.optString("language") else null
    }
}
