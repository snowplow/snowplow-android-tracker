
apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.vanniktech.maven.publish'

jacoco {
    toolVersion = "0.8.5"
}

project.ext {
    archLifecycleVersion = "2.2.0"
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    useLibrary 'android.test.base'

    defaultConfig {
        // With API 24: Remove `androidx.appcompat:appcompat` as it's needed for Consumer<T>.
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "$project.version"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "TRACKER_LABEL", "\"andr-$project.version\""
            buildConfigField "String", "TRACKER_VERSION", "\"$project.version\""

            testCoverageEnabled = true
        }
        release {
            buildConfigField "String", "TRACKER_LABEL", "\"andr-$project.version\""
            buildConfigField "String", "TRACKER_VERSION", "\"$project.version\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    sourceSets {
        androidTest.manifest.srcFile "src/androidTest/AndroidManifest.xml"
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    // This enables long timeouts required on slow environments
    adbOptions {
        timeOutInMs 10 * 60 * 1000  // Set the timeout to 10 minutes
        installOptions "-d","-t"
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    compileOnly "androidx.lifecycle:lifecycle-extensions:$project.archLifecycleVersion"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    // test
    testImplementation "androidx.lifecycle:lifecycle-extensions:$project.archLifecycleVersion"
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'com.google.android.gms:play-services-analytics:17.0.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.0.0'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for snowplow-android-core $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.getJavaCompileProvider().get().source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst { classpath = files(variant.javaCompiler.classpath.files) + files(ext.androidJar) }
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        exclude '**/R.java'
    }
}

coveralls {
    jacocoReportPath "$buildDir/reports/coverage/debug/report.xml"
}

signing {
    useInMemoryPgpKeys(System.getenv('SONA_PGP_SECRET'), System.getenv('SONA_PGP_PASSPHRASE'))
}

// Deprecated: to fix as explained in https://github.com/vanniktech/gradle-maven-publish-plugin/issues/137
mavenPublish {
    targets {
        uploadArchives {
            releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            repositoryUsername = System.getenv('SONA_USER')
            repositoryPassword = System.getenv('SONA_PASS')
        }
    }
    nexus {
        repositoryUsername = System.getenv('SONA_USER') // defaults to the mavenCentralRepositoryUsername Gradle Property
        repositoryPassword = System.getenv('SONA_PASS') // defaults to the mavenCentralRepositoryPassword Gradle Property
    }
}

repositories {
    mavenCentral()
}

